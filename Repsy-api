package com.repsy;

import com.repsy.storage.IStorageService;
import com.repsy.storage.impl.FileSystemStorageService;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.*;

@SpringBootApplication
@RestController
public class RepsyApiApplication {

    private final IStorageService storageService;

    public RepsyApiApplication(IStorageService storageService) {
        this.storageService = storageService;
    }

    public static void main(String[] args) {
        SpringApplication.run(RepsyApiApplication.class, args);
    }

    @PostMapping("/{packageName}/{version}")
    public String deployPackage(@PathVariable String packageName,
                                 @PathVariable String version,
                                 @RequestParam("package.rep") MultipartFile repFile,
                                 @RequestParam("meta.json") MultipartFile metaFile) throws IOException {

        if (!repFile.getOriginalFilename().endsWith(".rep") || !metaFile.getOriginalFilename().equals("meta.json")) {
            return "Invalid files. Expecting package.rep and meta.json.";
        }

        storageService.saveFile(packageName, version, "package.rep", repFile.getInputStream());
        storageService.saveFile(packageName, version, "meta.json", metaFile.getInputStream());

        return "Package deployed successfully.";
    }

    @GetMapping("/{packageName}/{version}/{fileName}")
    public byte[] downloadFile(@PathVariable String packageName,
                                @PathVariable String version,
                                @PathVariable String fileName) throws IOException {
        return storageService.loadFile(packageName, version, fileName);
    }

    @Bean
    public IStorageService storageService(@Value("${storage.strategy:file-system}") String strategy) {
        // Future: add condition for minio
        return new FileSystemStorageService();
    }
}
